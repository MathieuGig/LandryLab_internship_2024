TableauDeDonnées <- data.frame()
for (i in paths)
{
TableauDeDonnées <- rbind(TableauDeDonnées, read.csv(i, colClasses = c(start_date = "Date")))
}
View(TableauDeDonnées)
l <- 1
d <- 1
x <- 0.2
angle <- pi/3
h <- l/2*sin(angle)
pos <- c(x,angle)
(x + h >= d | x <= h)
l <- 1
d <- 1
x <- 0.2
angle <- pi/3
pos <- c(x,angle)
intersects <- function(pos, angle, d, l = dist)
{
h <- l/2*sin(pos[2])
(pos[1] + h >= d | pos[1] <= h)
}
intersects(pos,angle,d,l)
intersects(c(1,pi/3), 2, 3)
intersects(c(1,pi/3), 2, 3)
l <- 1
d <- 1
x <- 0.2
angle <- pi/3
pos <- c(x,angle)
intersects <- function(pos, dist, l = dist)
{
if (l > dist)
stop("Longueur de l'aiguille supérieure à la distance entre les lignes")
h <- l/2*sin(pos[2])
(pos[1] + h >= d | pos[1] <= h)
}
intersects(c(1,pi/3), 2, 3)
#Test unitaires
isTRUE(intersects(c(0.2, pi/3), 1))
# Test unitaires
stopifnot(isTRUE(intersects(c(0.2, pi/3), 1)))
# Simulations
cbind(x = runif(10), angle = runif(10,0, 180))
# Simulations
runs <- cbind(x = runif(10), angle = runif(10,0, pi))
# Simulations
runs <- cbind(x = runif(10), angle = runif(10,0, pi))
apply(runs, 1, intersects(,1))
apply(runs, 1, intersects[pos, dist = 1])
apply(runs, 1, intersects)
apply(runs, 1, function(y) intersects(y, dist = 1))
runs <- cbind(x = runif(10), angle = runif(10,0, pi))
apply(runs, 1, function(y) intersects(y, dist = 1))
# Ou
apply(runs, 1, intersects, ...)
# Ou
apply(runs, 1, intersects, dist = 1)
###
### tariff_2020(x)
###
##
## calcule les revenus avant taxes liés à des déplacements
## selon la structure de tarif 2020.
##
## Arguments
##
## x: vecteur de durées de déplacements en secondes.
##
##
## Valeur
##
## un vecteur de montants de revenus en dollars
##
## Exemple
##
## tariff_2020(2100)
##
tariff_2020 <- function(x)
{
## Constantes
FRAIS_INITIAUX <- 2.99
FRAIS_SUP <- 1.80
FRAIS_TRANCHE <- 3.00
SECONDES_TRANCHE <- 900
## Cas de base du deplacement de 30 minutes ou moins (1800 secondes ou moins).
frais = FRAIS_INITIAUX
## Cas du deplacement de 30 à 45 minutes (1800 à 2700 secondes).
if (x > 1800 & x <= 2700)
frais = FRAIS_INITIAUX + FRAIS_SUP
## Cas du deplacement de plus de 45 minutes (2700 secondes ou plus).
if (x > 2700)
frais = FRAIS_INITIAUX + FRAIS_TRANCHE*(x %/% SECONDES_TRANCHE)
## Retourne la valeur des frais du déplacement.
frais
}
tariff_2020(1600)
tariff_2020(2100)
tariff_2020(2900)
tariff_2020(2900)
tariff_2020(3100)
tariff_2020(5100)
###
### tariff_2022(x)
###
##
## calcule les revenus avant taxes liés à des déplacements
## selon la structure de tarif 2022.
##
## Arguments
##
## x: vecteur de durées de déplacements en secondes.
##
##
## Valeur
##
## un vecteur de montants de revenus en dollars
##
## Exemple
##
## tariff_2022(360)
##
tariff_2022 <- function(x)
{
## Constantes
SECONDES_DANS_MINUTE <- 60
FRAIS_DEVEROUILLAGE <- 1
PREMIERE_MINUTE <- 1
FRAIS_PAR_MINUTE <- 0.015
COUT_MAX <- 15.00
## Équation du calcul des frais.
frais = FRAIS_PAR_MINUTE * (x %/% SECONDES_DANS_MINUTE - PREMIERE_MINUTE) + FRAIS_DEVEROUILLAGE
## Vérification de la condition du cout maximal.
if (frais > COUT_MAX)
frais = COUT_MAX
## Retourne la valeur des frais du déplacement.
frais
}
tariff_2022(60)
tariff_2022(120)
tariff_2022(180)
tariff_2022(240)
tariff_2022(360)
tariff_2022(370)
#5.9
a <- paste(0, 0:1, sep = ",")
a
a <- paste(0, 0:2, sep = ",")
a
#5.9
a <- paste(0, (0:2), sep = ",")
a
a <- paste(0:1,0:2,0:3,0:4, sep = ",")
a
#5.9
a <- 0:1 +0:2
a
a <- 0:2
b <- 0:3
paste(a,b, sep = ",")
a <- c(0,1,2)
b <- c(0,1,2,3)
paste(a,b, sep = ",")
a <- as.character(0:2)
a
a <- as.character(0:2)
b <- as.character(0:3)
paste(a,b, sep = ",")
unlist(lapply(0:10, seq, from = 0))
paste(unlist(lapply(0:10, seq, from = 0)))
A <- 2
L <- 5000
rpareto <- function(n, shape, scale) scale * (runif(n)^(-1/shape) - 1)
echantillons <- c(100, 150, 200, 250, 300)
sapply(echantillons, rpareto, shape = A, scale = L)
tt <- sapply(echantillons, rpareto, shape = A, scale = L)
ttmean <- mean(tt)
mean(sapply(echantillons, rpareto, shape = A, scale = L))
5 %% 1
5 %% 5
5 %% 2
PGCD <- function(m,n)
{
if (n == 0) return(m)
Recall(n, m %% n)
}
PPCM <- function(m,n)
{
if (m == 0 | n == 0)
return(0)
if (n == 1 | m == 1)
return(max(c(m,n)))
if (m == n)
return(m)
(m * n) / PGCD(m,n)
}
PPCM(3,12)
PPCM(1,3)
PPCM(1,4)
PPCM(1,4)
PPCM(2,4)
PPCM(2,4)
PPCM(2,4)
PGCD <- function(m,n)
{
if (n == 0) return(m)
Recall(n, m %% n)
}
PPCM <- function(m,n)
{
if (m == 0 | n == 0)
return(0)
if (n == 1 | m == 1)
return(max(c(m,n)))
if (m == n)
return(m)
Recall(n, m %% n)
}
PPCM(2,4)
PGCD <- function(m,n)
{
if (n == 0) return(m)
Recall(n, m %% n)
}
PPCM <- function(m,n)
{
if (m == 0 | n == 0)
return(0)
if (n == 1 | m == 1)
return(max(c(m,n)))
if (m == n)
return(m)
(m*n)/Recall(m,n)
}
PPCM(2,4)
PGCD <- function(m,n)
{
if (n == 0) return(m)
Recall(n, m %% n)
}
PPCM <- function(m,n)
{
if (m == 0 | n == 0)
return(0)
if (n == 1 | m == 1)
return(max(c(m,n)))
if (m == n)
return(m)
(m*n)/PGCD(m,n)
}
PPCM(2,4)
PPCM(0,4)
PPCM(1,4)
PPCM(14,7)
PGCD <- function(m,n)
{
if (n == 0)
return(m)
Recall(n, m %% n)
}
PPCM <- function(m,n)
{
if (m == 0 | n == 0)
return(0)
if (n == 1 | m == 1)
return(max(c(m,n)))
if (m == n)
return(m)
(m*n)/PGCD(m,n)
}
PPCM(14,7)
seq(0)
seq(0,6)
seq(6,0)
rep(c(0.6), times = 3)
rep(c(0,6), times = 3)
seq(1,10, by =3)
seq(1,10, by = 3)
rep(c(1,2,3), times = 4)
rep(c(1,2,3) times = c(1,2,3))
rep(c(1,2,3))
rep(c(1,2,3), times = x)
rep(c(1,2,3), times = c(1,2,3))
rep(c(1,2,3), times = c(3,2,1))
seq(1,10, by =4.5)
rep(c(1,2,3), times = 4)
rep(c(1,2,3), times = c(4,4,4)
rep(c(1,2,3), times = c(4,4,4))
rep(c(1,2,3), times = c(4,4,4))
#4.13
rep(1.1+0.1, times = 9)
#4.13
rep(1.1+0.1, times = 1:9)
#4.13
rep(1.1+0.1:0.9, times = 9)
#4.13
rep(1.1+0.1:0.9)
#4.13
rep(1.1+ c(0.1, 0.2)
#4.13
rep(1.1+ c(0.1, 0.2))
#4.13
rep(1.1+ c(0.1, 0.2))
#4.13
rep(1.1+ c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9), times = 9)
#4.13
rep(1.1+ c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9), times = 1)
#4.13
11:20/10
rep(1:20/2)
unlist(lapply(0:10, seq, from = 0))
unlist(lapply(0:2, seq, from = 0))
unlist(lapply(0:5, seq, from = 0))
rpareto <- function(n, shape, scale) scale * (runif(n)^(-1/shape) - 1)
echantillons <- lapply(seq(100, 300, by = 50), rpareto, shape = 2, scale = 5000)
names(echantillons) <- paste("sample", 1:5, sep = "")
names(echantillons) <- paste("sample", 1:5, sep = " ")
sapply(echantillons, mean)
paths <- paste("C:/Users/User/Desktop/IFT-4902/travail-longitudinal/OD_2021-",c(01:012),"u.csv", sep = "")
paths
dates <- as.Date(c("2021-06-22", "2021-07-22", "2021-08-22"))
paths <- paste("C:/Users/User/Desktop/IFT-4902/travail-longitudinal/OD_",substr(dates,1,7),"u.csv", sep = "")
TableauDeDonnées <- data.frame()
for (i in paths)
{
TableauDeDonnées <- rbind(TableauDeDonnées, read.csv(i, colClasses = c(start_date = "Date")))
#voir read.bixi pour le read.csv
#read.bixi(i)
}
dates <- as.Date(c("2021-06-22", "2021-07-22", "2021-08-22"))
paths <- paste("C:/Users/User/Desktop/IFT-4902/travail-longitudinal/OD_",substr(dates,1,7),"u.csv", sep = "")
TableauDeDonnées <- data.frame()
for (i in paths)
{
TableauDeDonnées <- rbind(TableauDeDonnées, read.csv(i, colClasses = c(start_date = "Date")))
#voir read.bixi pour le read.csv
#read.bixi(i)
}
dates <- as.Date(c("2021-06-22", "2021-07-22", "2021-08-22"))
paths <- paste("C:/Users/User/Desktop/IFT-4902/travail-longitudinal/OD_",substr(dates,1,7),"u.csv", sep = "")
TableauDeDonnées <- data.frame()
dates <- as.Date(c("2021-06-22", "2021-07-22", "2021-08-22"))
paths <- paste("C:/Users/User/Desktop/IFT-4902/travail-longitudinal/OD_",substr(dates,1,7),"u.csv", sep = "")
TableauDeDonnées <- data.frame()
View(TableauDeDonnées)
dates <- as.Date(c("2021-06-22", "2021-07-22", "2021-08-22"))
paths <- paste("C:/Users/User/Desktop/IFT-4902/travail-longitudinal/OD_",substr(dates,1,7),"u.csv", sep = "")
TableauDeDonnées <- data.frame()
for (i in paths)
{
TableauDeDonnées <- rbind(TableauDeDonnées, read.csv(i, colClasses = c(start_date = "Date")))
#voir read.bixi pour le read.csv
#read.bixi(i)
}
View(TableauDeDonnées)
TableauDeDonnées$duration_sec[grep("77", TableauDeDonnées$emplacement_pk_start)]
TableauDeDonnées$duration_sec[grep("10", TableauDeDonnées$emplacement_pk_start)]
#2
read.csv("C:/Users/User/Documents/IFT-4902/atelier4/bateau_extrait.csv")
#2
read.table("C:/Users/User/Documents/IFT-4902/atelier4/bateau_extrait.csv")
#2
read.delim("C:/Users/User/Documents/IFT-4902/atelier4/bateau_extrait.csv")
is.exemplesPresent <- function(x) as.logical(grep("##  Exemples*"), x)
is.exemplesPresent("C:/Users/User/Documents/IFT-4902/atelier4/foo")
is.exemplesPresent <- function(x) as.logical(grep("##  Exemples*"), x)
is.exemplesPresent("C:/Users/User/Documents/IFT-4902/atelier4/foo")
is.exemplesPresent <- function(x) as.logical(grep("##  Exemples*"), read(x))
is.exemplesPresent("C:/Users/User/Documents/IFT-4902/atelier4/foo")
is.exemplesPresent <- function(x) as.logical(grep("##  Exemples*"), read(x))
is.exemplesPresent("C:/Users/User/Documents/IFT-4902/atelier4/foo")
is.exemplesPresent <- function(x) as.logical(grep("##  Exemples*"), readLines(x, encoding = "UFT-8"))
is.exemplesPresent("C:/Users/User/Documents/IFT-4902/atelier4/foo")
is.exemplesPresent <- function(x) (grep("##  Exemples*"), readLines(x, encoding = "UFT-8"))
is.exemplesPresent <- function(x) as.logical(grep("##  Exemples*", readLines(x, encoding = "UFT-8")))
is.exemplesPresent("C:/Users/User/Documents/IFT-4902/atelier4/foo")
is.exemplesPresent <- function(x) as.logical(grep("##  Exemples*", readLines(x, encoding = "UFT-8")))
is.exemplesPresent("C:/Users/User/Documents/IFT-4902/atelier4/foo.R")
is.exemplesPresent("C:/Users/User/Documents/IFT-4902/atelier4/answer.R")
#11.8
x <- state.name
grep("ss",x)
x
#b)
x[grep("*s*s*s*",x)]
#b)
x[grep("s*s*s",x)]
#b)
x[grep("s+s+s",x)]
#b)
x[grep("s+s+",x)]
#b)
x[grep("s{3}",x)]
#b)
x[grep("s"{3},x)]
#b)
x[grep("s+",x)]
#b)
x[grep("ss+",x)]
#b)
x[grep("ss+s",x)]
#b)
x[grep("s+s+s",x)]
#b)
x[grep("s+s+",x)]
#b)
x[grep("s{3}",x)]
#c)
x[grep("..ss",x)]
#c)
x[grep(" ..ss",x)]
#c)
x[grep("?..ss",x)]
#c)
x[grep(""..ss",x)]
#c)
x[grep("[A-Z].ss",x)]
#b)
x[grep("s{3}",x)]
#b)
x[grep("sss",x)]
#b)
x[grep("s*s*s",x)]
#b)
x[grep("s+s*s",x)]
#b)
x[grep("s+s+s",x)]
#b)
x[grep("s+s+",x)]
#b)
x[grep("s+s+s",x)]
#b)
x[grep("s+s",x)]
#b)
x[grep("s+s+s",x)]
#b)
x[grep("s+s+s+",x)]
#b)
x[grep("ss+s+",x)]
#b)
x[grep("s.*s.*s",x)]
#c)
x[grep("[A-Z].ss",x)]
#c)
subset(x[grep("[A-Z].ss",x)],4)
#c)
paste(x[grep("[A-Z].ss",x)], ".", sep = "")
#c)
paste(substr(x[grep("[A-Z].ss",x)],1,4), ".", sep = "")
#c)
paste(substr(x[grep("[A-Z].ss", x)], 1, 4), ".", sep = "")
x <- sample(1:100, 20 * 1e6, replace = TRUE)
write.csv(matrix(x, ncol = 20), file = "data.csv")
#niaiseries
cumsum(c(1,2,3))
#niaiseries
cumsum(c(1))
#niaiseries
cumsum(c(2*6))
#niaiseries
cumprod(c(2,3,4))
typeof(2)
typeof(c(2,3,4))
typeof(c(FALSE))
typeof("aaaa")
mode("aaaa")
mode(FALSE)
mode(c(2,3,4))
typeof(c(2,3,4))
mode(c(TRUE, "hello"))
mode(c(TRUE, "hello", 4))
typeof(c(TRUE,"hello", 4))
# Create file for NCBI Common Taxonomy Tree tool.
write(c(TableauFKS1$Species, TableauFKS2$Species), file = "allspecies.txt")
setwd("~/GitHub/stage-ete2024/project/pipeline")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("VariantAnnotation")
fl <- system.file("data", "all.vcf", package="VariantAnnotation")
vcf <- readVcf(fl, "calls")
fl <- system.file("data", "all.vcf", package="VariantAnnotation")
vcf <- readVcf(fl, "calls")
library(VariantAnnotation)
fl <- system.file("data", "all.vcf", package="VariantAnnotation")
vcf <- readVcf(fl, "calls")
fl <- system.file("extdata", "all.vcf", package="VariantAnnotation")
vcf <- readVcf(fl, "calls")
fl <- system.file("extdata", "/all.vcf", package="VariantAnnotation")
vcf <- readVcf(fl, "calls")
pwd()
getwd()
fl <- system.file("extdata", "C:/Users/User/Documents/GitHub/stage-ete2024/project/pipeline/all.vcf", package="VariantAnnotation")
vcf <- readVcf(fl, "calls")
fl <- data.file"C:/Users/User/Documents/GitHub/stage-ete2024/project/pipeline/all.vcf"
fl <- data.file("C:/Users/User/Documents/GitHub/stage-ete2024/project/pipeline/all.vcf")
fl <- "C:/Users/User/Documents/GitHub/stage-ete2024/project/pipeline/all.vcf"
vcf <- readVcf(fl, "calls")
ref_genome <- "C:/Users/User/Documents/GitHub/stage-ete2024/project/synth_genome/my_synthetic_genome.txt"
#library(BSgenome.Hsapiens.UCSC.hg19)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
samples(header(vcf))
ref(vcf)
seq(ref(vcf))
alt(vcf)
alt(vcf)
reference <- ref(vcf)
mutations <- alt(vcf)
View(mutations)
View(reference)
df <- data.frame(reference, mutations)
pos(vcf)
